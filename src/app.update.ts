import {
  Ctx,
  Hears,
  Help,
  InjectBot,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Context, Telegraf } from 'telegraf';
import { getActionButtons } from './app.buttons';
import { QuizService } from './services/quiz/quiz.services';
import { AppService } from './services/app/app.service';
import { QuizIdsEnum } from './services/quiz/quiz.interface';
import { QuizIdToData } from './services/quiz/quiz.data';

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly quizService: QuizService,
    private readonly appService: AppService,
  ) {}

  @Start()
  async startBotCommand(ctx: Context) {
    await ctx.reply(
      '–ü—Ä–∏–≤–µ—Ç! –¢–µ—Å—Ç –∑–∞ 2 –º–∏–Ω—É—Ç—ã, –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –≤–∞–∂–Ω–æ–µ –æ —Å–µ–±–µ –∏ –Ω–∞—á–∞—Ç—å —à–∞–≥–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.',
      getActionButtons(),
    );
  }

  @Help()
  async getHelp(ctx: Context) {
    await ctx.reply('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: /start', getActionButtons());
  }

  @Hears('üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
  async getInfo(ctx: Context) {
    await this.appService.getMessageInfo(ctx);
    await this.appService.getMessageJoinGroup(ctx);
  }

  @Hears('‚òé –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏')
  async sendPhone(ctx: Context) {
    await this.appService.sendPhoneToAdmin(ctx);
    await this.appService.getMessageJoinGroup(ctx);
  }

  //------–ö–í–ò–ó

  @Hears('üìã –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç')
  async startQuiz(ctx: Context) {
    await this.quizService.selectQuiz(ctx);
  }

  @Hears('üçã –°—Ç—Ä–µ—Å—Å')
  async startStressQuiz(ctx: Context) {
    await this.quizService.startQuiz(ctx, QuizIdsEnum.QUIZ_QUESTIONS_STRESS);
  }

  @Hears('ü•¶ –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏')
  async startImtQuiz(ctx: Context) {
    await this.quizService.startQuiz(ctx, QuizIdsEnum.QUIZ_QUESTIONS_IMT);
  }

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–≤–∏–∑–∞
  @Hears('/cancel')
  async cancelQuiz(@Ctx() ctx: Context) {
    if (ctx.session.quiz) {
      delete ctx.session.quiz;
      await ctx.reply('‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω', getActionButtons());
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–≤–∏–∑–∞
  @On('text')
  async handleText(@Ctx() ctx: Context<any>) {
    const quizState = ctx.session.quiz;
    const quizId = ctx.session.quizId;

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–≤–∏–∑–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (!quizState || quizId === undefined) return;

    const answer = ctx.message?.text;
    const currentIndex = quizState.index;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    const isValid = await this.quizService.handleAnswer(ctx, answer, quizId);

    if (!isValid) return;

    if (currentIndex < QuizIdToData[quizId].length - 1) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
      await this.quizService.sendQuestion(ctx, currentIndex + 1, quizId);
    } else {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
      await this.quizService.finishQuiz(ctx, quizId);
      await this.appService.getMessageJoinGroup(ctx);
    }
  }
}
