import { Injectable } from '@nestjs/common';
import { Context, Markup } from 'telegraf';
import { QuizIdToData } from './quiz.data';
import { getActionButtons } from '../../app.buttons';
import { generateImtText, generateStressText, isValidNumber } from './utils';
import * as process from 'node:process';
import { getTextForAdmin } from '../../utils';
import { getQuizButtons } from './quiz.buttons';
import { QuizIdsEnum } from './quiz.interface';

@Injectable()
export class QuizService {

  // –í–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞
  private questions: any;

  // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ 1-5
  private options: any;

  // –í—ã–±–æ—Ä –∫–≤–∏–∑–∞
  async selectQuiz(ctx: Context) {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç', getQuizButtons());
  }

  // –ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞
  async startQuiz(ctx: Context, quizId: QuizIdsEnum) {
    await ctx.reply('–¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω', Markup.removeKeyboard());

    ctx.session.quizId = quizId;
    ctx.session.quiz = {
      index: 0,
      answers: [],
    };
    this.options = QuizIdToData[quizId].map((data) => data.options);
    this.questions = QuizIdToData[quizId].map((data) => data.text);

    await this.sendQuestion(ctx, 0, quizId);

    setTimeout(
      () => {
        if (ctx.session.quiz?.index) {
          delete ctx.session.quiz;
          ctx.reply(
            '‚åõ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ',
            getActionButtons(),
          );
        }
      },
      10 * 60 * 1000,
    ); // 10 –º–∏–Ω—É—Ç
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async sendQuestion(ctx: Context, questionIndex: number, quizId: QuizIdsEnum) {
    // –í–æ–ø—Ä–æ—Å—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    if (QuizIdToData[quizId][questionIndex].type === 'choice') {
      await ctx.reply(
        this.questions[questionIndex],
        Markup.keyboard(this.options[questionIndex] as string[]).resize(),
      );
      // –í–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
    } else if (QuizIdToData[quizId][questionIndex].type === 'text') {
      await ctx.reply(this.questions[questionIndex], Markup.removeKeyboard());
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
  async handleAnswer(ctx: Context, answer: string, quizId: QuizIdsEnum) {
    const quiz = ctx.session.quiz;

    if (!quiz) return false;

    const questionIndex = quiz.index;

    // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
    if (QuizIdToData[quizId][questionIndex].type === 'text') {
      if (answer.length < 1) {
        await ctx.reply('‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return false;
      }
      if (!isValidNumber(answer)) {
        await ctx.reply('‚ùå –í–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞: 1.3 –∏–ª–∏ 13');
        return false;
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    quiz.answers[questionIndex] = answer.trim();
    quiz.index++;

    return true;
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
  async finishQuiz(ctx: Context, quizId: QuizIdsEnum) {
    const quiz = ctx.session.quiz;

    if (!quiz) return;

    await this.sendFinishText(ctx, quiz.answers, quizId)

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    delete ctx.session.quiz;
    delete ctx.session.quizId;
  }

  async sendFinishText(ctx: Context, answers: string[], quizId: QuizIdsEnum) {

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    let report = 'üìä –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n';
    answers.forEach((answer, index) => {
      report += `${index + 1}. ${answer || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}\n`;
    });
    report += '\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç—É ‚úÖ\n';
    await ctx.reply(report, getActionButtons());

    // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–±–æ—Ä –ø–æ –æ—Ç–≤–µ—Ç–∞–º
    if (quizId === QuizIdsEnum.QUIZ_QUESTIONS_IMT) {
      const imtText = generateImtText(answers);
      await ctx.reply(imtText);
    }

    if (quizId === QuizIdsEnum.QUIZ_QUESTIONS_STRESS) {
      const stressText = generateStressText(answers);
      await ctx.reply(stressText);
    }

    //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await this.sendResultToAdmin(ctx, report);
  }

  async sendResultToAdmin(ctx: Context, message: string) {
    try {
      const adminId = process.env.ADMIN_TELEGRAM_ID as string;
      await ctx.telegram.sendMessage(adminId, getTextForAdmin(ctx, message));
    } catch (error) {
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }
}
