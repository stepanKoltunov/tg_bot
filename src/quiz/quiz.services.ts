import { Injectable } from '@nestjs/common';
import { Context, Markup } from 'telegraf';
import { QUIZ_QUESTIONS } from './quiz.data';
import { getActionButtons } from '../app.buttons';

@Injectable()
export class QuizService {
  // –í–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞
  private readonly questions = QUIZ_QUESTIONS.map(data=> data.text)

  // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ 1-5
  private readonly options = QUIZ_QUESTIONS.map(data=> data.options)

  // –ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞
  async startQuiz(ctx: Context) {
    ctx.session.quiz = {
      step: 1,
      answers: new Array(6).fill(null)
    };
    await this.sendQuestion(ctx, 1);
    setTimeout(() => {
      if (ctx.session.quiz?.step) {
        delete ctx.session.quiz;
        ctx.reply('‚åõ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–∏–∑–∞ –∏—Å—Ç–µ–∫–ª–æ', getActionButtons());
      }
    }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async sendQuestion(ctx: Context, step: number) {
    const questionIndex = step - 1;

    if (step <= 7) {
      // –í–æ–ø—Ä–æ—Å—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
      await ctx.reply(
        this.questions[questionIndex],
        Markup.keyboard(this.options[questionIndex] as string[]).resize().oneTime()
      );
    } else {
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - —Ç–µ–∫—Å—Ç–æ–≤—ã–π
      await ctx.reply(
        this.questions[questionIndex],
        Markup.removeKeyboard()
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
  async handleAnswer(ctx: Context, answer: string) {
    const quiz = ctx.session.quiz;
    if (!quiz) return false;

    const currentStep = quiz.step;
    const stepIndex = currentStep - 1;

    // –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
    if (currentStep === 8 || currentStep === 9) {
      if (answer.length < 1) {
        await ctx.reply("‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
        return false;
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    quiz.answers[stepIndex] = answer;
    quiz.step++;

    return true;
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
  async finishQuiz(ctx: Context) {
    const quiz = ctx.session.quiz;
    if (!quiz) return;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    let report = "üìä –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n";
    quiz.answers.forEach((answer, index) => {
      report += `${index + 1}. ${answer || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}\n`;
    });

    await ctx.reply(report);

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    let correctAnswers = 0
    quiz.answers.forEach((answer, index) => {
      if (QUIZ_QUESTIONS[index].currentAnswer?.includes(answer)) {
        correctAnswers++
      }
    });
    await ctx.reply(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswers}/5`);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    delete ctx.session.quiz;
  }
}